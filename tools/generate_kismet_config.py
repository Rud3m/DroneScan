#!/usr/bin/env python3
import csv
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
DATA = ROOT / "data"
CONF = ROOT / "conf"
OUT = CONF / "oui_alerts.conf"

def norm_oui(oui: str) -> str:
    oui = oui.strip().upper().replace("-", ":")
    parts = oui.split(":")
    if len(parts) != 3 or any(len(p) != 2 for p in parts):
        raise ValueError(f"Bad OUI format (want XX:XX:XX): {oui}")
    return ":".join(parts)

def emit_line(oui: str) -> str:
    return f"devicefound={oui}:00:00:00/FF:FF:FF:00:00:00"

def rows_from(csv_path):
    with open(csv_path, newline="") as f:
        r = csv.DictReader(f)
        for row in r:
            if not row["vendor"] or not row["oui"]:
                continue
            yield {
                "vendor": row["vendor"].strip(),
                "oui": norm_oui(row["oui"]),
                "source_url": (row.get("source_url") or "").strip(),
                "notes": (row.get("notes") or "").strip(),
            }

def main():
    CONF.mkdir(parents=True, exist_ok=True)
    groups = []
    for csv_name in ("oui_drones.csv", "oui_modules.csv"):
        p = DATA / csv_name
        if p.exists():
            groups.append((csv_name, list(rows_from(p))))
    seen = set()
    lines = [
        "# This file is generated by tools/generate_kismet_config.py",
        "# DO NOT EDIT BY HAND — edit data/*.csv and re-generate.",
        ""
    ]
    for csv_name, rows in groups:
        for r in rows:
            if r["oui"] in seen:
                continue
            seen.add(r["oui"])
            lines.append(f"# {r['vendor']} — {r['oui']}")
            lines.append(emit_line(r["oui"]))
            lines.append("")
    OUT.write_text("\n".join(lines).rstrip() + "\n")
    print(f"Wrote {OUT}")

if __name__ == "__main__":
    main()
